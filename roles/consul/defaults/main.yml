#--------------------- Consul ------------------#
config_dir: "{{ consul_config_dir | default(compose_dir) }}"
data_dir: "{{ consul_data_dir | default('/consul/data') }}"
version: "{{ consul_version | default('1.2.4') }}"
stack_name: "{{ consul_stack_name | default('consul') }}"

consul_datacenter: "default"
consul_api_token: "SECR3T"
consul_log_level: "INFO"
consul_docker_vol: "{{ stack_name }}"

consul_server_config: "{{ config_dir }}/server"
consul_agent_config: "{{ config_dir }}/agent"

directories:
  - "{{ compose_dir }}"
  - "{{ config_dir }}"
  - "{{ data_dir }}"
  - "{{ consul_server_config }}"
  - "{{ consul_agent_config }}"

templates:
  - { file: "service.json", dest: "{{ consul_agent_config }}" }
  - { file: "service.json", dest: "{{ consul_server_config }}" }
  - { file: "server-config.json", dest: "{{ consul_server_config }}" }
  - { file: "agent-config.json", dest: "{{ consul_agent_config }}" }

volumes:
  - "{{ consul_docker_vol }}"

local_volumes:
  - "{{ data_dir }}"
  - "{{ config_dir }}"

images:
  - name: "consul"
    prefix: "consul"
    tag: "{{ version }}"
    ports:
      - target: 8500
        published: 8500
        mode: host
      - target: 8300
        published: 8300
        mode: host
        protocol: tcp
      - target: 8301
        published: 8301
        mode: host
        protocol: tcp
      - target: 8302
        published: 8302
        mode: host
        protocol: tcp
      - target: 8300
        published: 8300
        mode: host
        protocol: udp
      - target: 8301
        published: 8301
        mode: host
        protocol: udp
      - target: 8302
        published: 8302
        mode: host
        protocol: udp
      - target: 8600
        published: 53
        mode: host
        protocol: udp
      - target: 8600
        published: 53
        mode: host
        protocol: tcp
    environment:
      - "CONSUL_ALLOW_PRIVILEGED_PORTS=53"
      - "CONSUL_BIND_INTERFACE={{ consul_bind_interface }}"
      - "CONSUL_HTTP_TOKEN={{ consul_api_token }}"
      - SERVICE_8300_IGNORE=true
      - SERVICE_8301_IGNORE=true
      - SERVICE_8302_IGNORE=true
      - SERVICE_8600_IGNORE=true
      - SERVICE_8500_name=gui
      - SERVICE_NAME=consul
      - "SERVICE_TAGS=consul,gui"
    volumes:
      - "{{ consul_docker_vol }}:/consul/data"
      - "{{ consul_server_config }}:/etc/consul"
    command: agent -ui -config-dir /etc/consul -bootstrap-expect={{ groups['swarm-managers']|length }} -retry-join consul.cluster
    networks:
      swarm_network:
        aliases:
          - consul.cluster
    deploy:
      endpoint_mode: dnsrr
      mode: global
      placement:
        constraints: [node.role ==  manager]
      labels:
        - "traefik.frontend.rule=Host:gui.service.{{ domain_name }}"
        - traefik.enable=true
        - traefik.port=8500 # Inner port
        - traefik.tags=gui
        - traefik.docker.network=swarm_network
        - traefik.redirectorservice.frontend.entryPoints=http

  - name: "consul-client"
    prefix: "consul"
    tag: "{{ version }}"
    ports:
      - target: 8300
        published: 8300
        mode: host
        protocol: tcp
      - target: 8301
        published: 8301
        mode: host
        protocol: tcp
      - target: 8302
        published: 8302
        mode: host
        protocol: tcp
      - target: 8300
        published: 8300
        mode: host
        protocol: udp
      - target: 8301
        published: 8301
        mode: host
        protocol: udp
      - target: 8302
        published: 8302
        mode: host
        protocol: udp
      - target: 8600
        published: 8600
        mode: host
        protocol: udp
      - target: 8600
        published: 8600
        mode: host
        protocol: tcp
    environment:
      - "CONSUL_BIND_INTERFACE={{ consul_bind_interface }}"
      - "CONSUL_HTTP_TOKEN={{ consul_api_token }}"
    volumes:
      - "{{ consul_docker_vol }}:/consul/data"
      - "{{ consul_agent_config }}:/etc/consul"
    command: agent -config-dir /etc/consul -retry-join consul.cluster
    networks:
      swarm_network:
        aliases:
          - consul.cluster
    deploy:
      endpoint_mode: dnsrr
      mode: global
      placement:
        constraints: [node.role !=  manager]


# TODO FIXME Connect to node IP
  # - name: "registrator"
  #   prefix: "gliderlabs/registrator"
  #   tag: "master"
  #   environment:
  #     - "CONSUL_HTTP_TOKEN={{ consul_api_token }}"
  #   volumes:
  #     - /var/run/docker.sock:/tmp/docker.sock
  #   command: '-internal {{hostvars[groups["swarm-managers"][0]]["ansible_host"] }}  consul://consul.cluster:8500'
  #   networks:
  #     swarm_network:
  #       aliases:
  #         - consul.cluster
  #   deploy:
  #     mode: global

  - name: "traefik"
    prefix: traefik
    tag: v1.7
    depends_on:
      - traefik_init
      - consul
    environment:
      - "CONSUL_HTTP_TOKEN={{ consul_api_token }}"
      - SERVICE_80_IGNORE=true
      - SERVICE_8080_NAME=traefik
      - "SERVICE_TAGS=traefik"
    command:
      # - "storeconfig"
      - "--api"
      - "--entrypoints=Name:http Address::80"
      - "--entrypoints=Name:https Address::443 TLS"
      - "--defaultentrypoints=http"
      - "--docker"
      - "--docker.swarmMode"
      - "--docker.domain={{ domain_name }}"
      - "--docker.watch"
      # - "--consulCatalog"
      # - "--consulCatalog.endpoint=consul.cluster:8500"
      # - "--consulCatalog.exposedByDefault=false"
      # - "--consulCatalog.domain={{ domain_name }}"
      # - "--consulCatalog.prefix=traefik"
#      - '--frontEndRule.Host:{{.ServiceName}}.service.{{ domain_name }}'
      # - "--consul"
      # - "--consul.endpoint=consul.cluster:8500"
      # - "--consul.prefix=traefik"
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
    networks:
      swarm_network:
        aliases:
          - consul.cluster
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 8080
        published: 8080
        mode: host
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.frontend.rule=Host:traefik.service.{{ domain_name }}"
        - traefik.enable=true
        - traefik.port=8080 # Inner port
        - traefik.tags=traefik
        - traefik.docker.network=swarm_network
        - traefik.redirectorservice.frontend.entryPoints=http
