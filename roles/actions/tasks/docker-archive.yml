---
- name: "SET FACTS"
  set_fact:
    docker_image:
      hostname: "{{ image.name }}"
      ports: "{{ image.ports if image.ports is defined else '' }}"
      id: "{{ image.prefix }}:{{ image.tag }}"
      #binary: "{{ image.name }}-{{ image.tag }}.image.tar"
      binary: "{{ image.prefix.split('/')[-1] }}-{{ image.tag }}.image.tar"


- name: "Set docker images directory -> {{ archive_dir }}"
  set_fact:
    archive_dir: "{{ images_dir }}"
    local: true
  tags:
    - archive

- name: "Set docker images directory -> {{ archive_dir }}"
  set_fact:
    archive_dir: "/tmp"
    local: false
  when:
  - registry_role | bool
  - "'local' not in groups['registry-nodes'][0]"
  tags:
    - archive

- name: "Create binary directory"
  become: true
  file:
    path: "{{ archive_dir }}"
    state: directory
  tags:
    - archive

# --------------------------------
- name: "Check {{ docker_image.binary }} exists"
  stat:
    path: "{{ images_dir }}/{{ docker_image.binary }}"
  register: binary
  tags:
    - archive

- name: "Fetch {{ docker_image.binary }}"
  delegate_to: "{{ groups['registry-nodes'][0] }}"
  copy:
    src: "{{ images_dir }}/{{ docker_image.binary }}"
    dest: "{{ archive_dir }}/{{ docker_image.binary }}"
  when:
  - not local | bool
  - registry_role | bool
  - binary.stat.exists
  register: fetch
  tags:
    - archive

- name: "Load {{ docker_image.binary }} to docker images"
  delegate_to: "{{ groups['registry-nodes'][0] }}"
  docker_image:
    name: "{{ docker_image.id }}"
    repository: "{{ registry_hostname }}/{{ docker_image.id }}"
    load_path: "{{ archive_dir }}/{{ docker_image.binary }}"
    #push: true
  when:
  - binary.stat.exists | bool
  tags:
    - archive

# Archive FROM Images to build inside
- block:
  - name: "Check {{ image.build.from }} exists"
    stat:
      path: "{{ images_dir }}/{{ image.build.from.split(':')[0] }}-{{ image.build.from.split(':')[1] }}.image.tar"
    register: from_binary
    tags:
      - archive

  - name: "Archive -FROM- images: {{ image.build.from }}"
    become: true
    docker_image:
      name: "{{ image.build.from }}"
      repository: "{{ registry_hostname }}/{{ image.build.from }}"
      archive_path: "{{ archive_dir }}/{{ image.build.from.split(':')[0] }}-{{ image.build.from.split(':')[1] }}.image.tar"
    when:
      - not from_binary.stat.exists | bool
      - internet_available | bool
    tags:
      - archive

  - name: "Load {{ image.build.from }} to docker images"
    docker_image:
      name: "{{ image.build.from }}"
      repository: "{{ registry_hostname }}/{{ image.build.from }}"
      load_path: "{{ archive_dir }}/{{ image.build.from.split(':')[0] }}-{{ image.build.from.split(':')[1] }}.image.tar"
    when:
      - from_binary.stat.exists | bool
    tags:
      - archive

  - name: "Tag & Push {{ registry_hostname }}/{{ image.build.from }}"
    shell: "{{ item }}"
    with_items:
      - "docker tag {{ image.build.from }} {{ registry_hostname }}/{{ image.build.from }}"
      - "docker push {{ registry_hostname }}/{{ image.build.from }}"
    tags:
      - push

  - name: "Build image {{ docker_image.binary }}"
    shell: "docker build {{ compose_dir }} --network host -f {{ compose_dir }}/{{ image.build.dockerfile }} -t {{ image.name }}:{{ image.tag }} --no-cache"
    tags:
      - archive

  # TODO FIXME --network host not supported
  # - name: "Build image {{ docker_image.binary }}"
  #   docker_image:
  #     path: "{{ compose_dir }}"
  #     dockerfile: "{{ image.build.dockerfile }}"
  #     name: "{{ image.name }}"
  #     tag: "{{ image.tag }}"
  #     pull: no
  #     #push: yes
  #   tags:
  #     - archive

  - name: "Archive -CUSTOM- images: {{ docker_image.binary }}"
    become: true
    docker_image:
      name: "{{ docker_image.id }}"
      archive_path: "{{ archive_dir }}/{{ docker_image.binary }}"
      pull: no
    when:
      - not binary.stat.exists | bool
    tags:
      - archive

  when:
    - image.build is defined

- name: "Archive -PUBLIC- {{ docker_image.binary }}"
  become: true
  docker_image:
    name: "{{ docker_image.id }}"
    archive_path: "{{ archive_dir }}/{{ docker_image.binary }}"
    pull: true
  when:
    - not binary.stat.exists | bool
    - internet_available | bool
    - image.build is not defined
  tags:
    - archive

- name: "Check if image is loaded"
  shell: "docker images -q -f 'reference={{ docker_image.id }}' | wc -l"
  register: image_loaded
  tags:
    - push

- name: "Tag & Push {{ registry_hostname }}/{{ docker_image.id }}"
  shell: "{{ item }}"
  with_items:
    - "'1' in image_loaded.stdout"
    - "docker tag {{ docker_image.id }} {{ registry_hostname }}/{{ docker_image.id }}"
    - "docker push {{ registry_hostname }}/{{ docker_image.id }}"
  when:
    - registry_role is defined
    - not registry_role | bool
  tags:
    - push

# TODO FIXME MODULE BUG https://github.com/ansible/ansible/issues/44077
# - name: "Push images {{ registry_hostname }}/{{ docker_image.id }}"
#   docker_image:
#     name: "{{ docker_image.id }}"
#     # tag: "{{ image.tag }}"
#     repository: "{{ registry_hostname }}/{{ docker_image.id }}"
#     pull: no
#     push: yes
#     # Ansible doesnt check if image in registry therefore push always
#     force: yes
#   when:
#     - registry_role is defined and not registry_role | bool
